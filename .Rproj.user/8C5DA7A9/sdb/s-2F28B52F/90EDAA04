{
    "collab_server" : "",
    "contents" : "#' @title Evaluate clustering results\n#' @description Evaluate clustering results\n#' my_evaluate_clustering_result\n#'\n#'\n#' @param data_name\n#' @param Label\n#' @param annotation_data\n#' @param EvaIndex\n#'\n#' @param Label,annotation_data,EvaIndex\n#'\n#'\nEvaluate_clustering_result = function(data_name,Label,annotation_data,EvaIndex = c('NMI','ARI','MeanFscore')){\n  # Note 1 (for NMI_max_version): NMI_max_version = aricode::NMI(A,B,'max') (Note that aricode::AMI(A,B) is problematic, since it outputs the same result as aricode::NMI(A,B))\n  # this equals to the NMI output by matlab code \"ANMI_analytical_11\" written by  Nguyen Xuan Vinh 2008-2009\n  # This version is however much faster than than those in \"ANMI_analytical_11\" and \"aricode\"\n  #References:\n  #  'Information Theoretic Measures for Clusterings Comparison: Variants, Properties, Normalization and Correction for Chance', N.X. Vinh, Epps, J. and Bailey, J., Journal of Machine Learning Research, 2010\n\n  # Note 2 (for densitycut::ComputeNMI):\n  # densitycut::ComputeNMI = SNFtool::calNMI = aricode::NMI(A,B,'sqrt') ~= mclustcomp::mclustcomp(A,B,types = c('nmi1'))\n  # the methods in note 2 refer to 'nmi1'\tNormalized Mutual Information by Strehl and Ghosh.\n\n  # Note 3: aricode contains 5 variants of NMI: NMI(c1, c2, variant = c(\"max\", \"min\", \"sqrt\", \"sum\", \"joint\"))\n  # mclustcomp contains 3 variants of NMI\n\n  # Note 4: aricode::NMI(A,B,'sum') = mclustcomp::mclustcomp(A,B,types = 'nmi3')\n  # Note 5: aricode::NVI(A,B) != mclustcomp::mclustcomp(A,B,types = 'nvi'), which is strange and problematic\n  # Note 6: mclustcomp::mclustcomp(A,B,types = 'adjrand') = aricode::ARI(A,B) = mclust::adjustedRandIndex(A,B)\n\n  NMI= c();NMI_max_version = c();ARI = c();MeanF = c()\n  Label = as.numeric(Label)\n  if (!is.numeric(annotation_data)){\n    annotation_data = factor(annotation_data,labels =  1:length(unique(annotation_data)))\n    annotation_data = as.numeric(annotation_data)\n  }\n  annotation_data = as.numeric(annotation_data)\n  if (any(data_name == c(\"Samusik_01\",\"Samusik_all\"))){\n    unassigned <- is.na(annotation_data)\n    annotation_data = annotation_data[!unassigned]\n    Label = Label[!unassigned]\n    if (any('NMI' == EvaIndex)){\n      NMI=densitycut::ComputeNMI(annotation_data,Label)\n    }\n    if (any('NMI_max_version' == EvaIndex)){\n      NMI_max_version = NMI_max_version(annotation_data,Label)\n    }\n    if (any('MeanFscore' == EvaIndex)){\n      res= helper_match_evaluate_multiple(annotation_data, Label)\n      MeanF = res$mean_F1\n      # Fscore=FlowSOM::FMeasure(annotation_data,Label, silent = FALSE)\n    }\n    if (any('ARI' == EvaIndex)){\n      ARI = mclust::adjustedRandIndex(annotation_data,Label)\n    }\n\n    # meanPurity =FlowSOM::Purity(annotation_data,annotation_data, weighted = TRUE)[1]\n  } else {\n    if (any('NMI' == EvaIndex)){\n      NMI=densitycut::ComputeNMI(annotation_data,Label) # MI(A,B)/sqrt(H(A)*H(B)) reference: 'nmi1'\tNormalized Mutual Information by Strehl and Ghosh.\n    }\n    if (any('NMI_max_version' == EvaIndex)){\n      NMI_max_version = NMI_max_version(annotation_data,Label)\n    }\n    if (any('MeanFscore' == EvaIndex)){\n      res= helper_match_evaluate_multiple(Label,annotation_data)\n      MeanF = res$mean_F1\n      # Fscore=FlowSOM::FMeasure(annotation_data,Label, silent = FALSE)\n    }\n    if (any('ARI' == EvaIndex)) {ARI = mclust::adjustedRandIndex(annotation_data,Label)}\n\n    # meanPurity =FlowSOM::Purity(annotation_data,Label, weighted = TRUE)[1]\n  }\n\n  ## Note that one can use the following code to show NMI and ARI\n  # E2 = mclustcomp::mclustcomp(A,B,types = c('nmi1','adjrand'))\n  # mclustcomp package collects 25 evaluation index\n\n  return(list(NMI= NMI,NMI_max_version = NMI_max_version,ARI = ARI,MeanF = MeanF))\n\n}\n",
    "created" : 1611147904724.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1705268069",
    "id" : "90EDAA04",
    "lastKnownWriteTime" : 1611148279,
    "last_content_update" : 1611148279447,
    "path" : "F:/Download_code/TPE/tpe/R/HnndPRdata/Clustering-by-HNND-PR-Github/R/Evaluate_clustering_result.R",
    "project_path" : "R/Evaluate_clustering_result.R",
    "properties" : {
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}